#!/usr/bin/env python

# execute
#
# Copyright (C) 2017 naheel_azawy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import os.path
import sys
import shlex
import platform
import re
import shutil
import json
from distutils.spawn import find_executable

TEST = False
SHOW_COMMANDS = False

COMPARGS = "--compargs"
RUNARGS = "--runargs"
MOREFILES = "--morefiles"
LINES_FROM = "--from"
LINES_TO = "--to"

COMPARGS_S = "-c"
RUNARGS_S = "-r"
MOREFILES_S = "-m"
LINES_FROM_S = "-f"
LINES_TO_S = "-t"

DIST = platform.linux_distribution()[0].lower()
if "elementary" in DIST:
    DIST = "ubuntu"
HOME = os.path.expanduser('~')
BASE = HOME + "/.execs"

LANGUAGES = \
{} # from executor.json

def main():

    try:
        LANGUAGES.update(json.load(open(HOME + "/.executor.json")))
    except Exception:
        pass

    fr = 0
    to = 0
    frb = False
    tob = False
    cmArgs = ""
    cmFiles = ""
    rnArgs = ""
    sourceFile = ""
    tmp = False

    def getLang(fileExtension):
        lang = None
        try:
            lang = LANGUAGES[fileExtension]
        except Exception:
            print "Invalid input file: '" + sourceFile + "'"
            quit()
        try:
            equal = lang["equal"]
            lang = LANGUAGES[equal]
        except Exception:
            pass
        return lang

    def isInstalled(name):
        if len(name) == 0: return True
        return find_executable(name) is not None

    def getInstaller(lang, distro):
        try:
            install = lang["install"]
            try:
                res = install[distro]
            except Exception:
                res = install["default"]
            return res
        except Exception:
            return None

    def installIfNeeded(lang, distro, ext):
        cm = lang["cm"].split(" ")
        rn = lang["rn"].split(" ")
        if len(cm) > 1: cm = cm[0]
        else: cm = ""
        if len(rn) > 1: rn = rn[0]
        else: rn = ""
        installCm = not isInstalled(cm)
        installRn = not isInstalled(rn)
        if installCm or installRn:
            inst = getInstaller(lang, distro)
            if inst != None:
                try:
                    name = lang["name"]
                except Exception:
                    name = ext
                msg = "Installing " + name + " ("
                if installCm: msg += cm
                if installCm and installRn: msg += ", "
                if installRn: msg += rn
                msg += ")...\n"
                print(msg)
                os.system(inst)

    argstr = ""
    argc = len(sys.argv)
    for a in range(0, argc - 1):
        argstr += sys.argv[a] + " "
    argstr += "\'" + sys.argv[argc - 1] + "\'"
    args = shlex.split(argstr)

    if TEST:
        print argstr
        i = 0
        for a in args:
            print str(i) + "- " + a
            i += 1
        print "--------------"

    i = 1
    while i < len(args):
        if args[i] == COMPARGS or args[i] == COMPARGS_S:
            cmArgs += " " + args[i + 1]
            i += 1
        elif args[i] == RUNARGS or args[i] == RUNARGS_S:
            rnArgs += " " + args[i + 1]
            i += 1
        elif args[i] == MOREFILES or args[i] == MOREFILES_S:
            cmFiles += " '" + args[i + 1] + "'"
            i += 1
        elif args[i] == LINES_FROM or args[i] == LINES_FROM_S:
            fr = int(args[i + 1]) - 1
            frb = True
            i += 1
        elif args[i] == LINES_TO or args[i] == LINES_TO_S:
            to = int(args[i + 1])
            tob = True
            i += 1
        elif sourceFile == "" and os.path.exists(args[i]):
            sourceFile = os.path.abspath(args[i])
        elif ("." + args[i]) in LANGUAGES:
            tmp = True
            ext = "." + args[i]
            sourceFile = BASE + "/Tmp." + args[i]
            src = ""
            i += 1
            while i < len(args):
                src += args[i] + " "
                i += 1
            with open(sourceFile, 'w') as fout:
                lang = getLang(ext)
                try:
                    srcFinal = lang["tmp"].format(s=src)
                except Exception:
                    srcFinal = src
                fout.write(srcFinal)
                fout.close()
        else:
            rnArgs += " " + args[i]
        i += 1

    sh = False

    with open(sourceFile, 'r') as fin:
        data = fin.read().splitlines(True)

    argsSearch = re.search("#!.*/execute(.*)", data[0])
    if argsSearch:
        argstr = argsSearch.group(1)
        data[0] = "\n"
        sh = True
        args2 = shlex.split(argstr)
        if args[1:len(args) - 1] != args2:
            args = args2
            i = 0
            while i < len(args):
                if args[i] == COMPARGS or args[i] == COMPARGS_S:
                    cmArgs += " " + args[i + 1]
                    i += 1
                elif args[i] == RUNARGS or args[i] == RUNARGS_S:
                    rnArgs += " " + args[i + 1]
                    i += 1
                elif args[i] == MOREFILES or args[i] == MOREFILES_S:
                    cmFiles += " '" + args[i + 1] + "'"
                    i += 1
                elif args[i] == LINES_FROM or args[i] == LINES_FROM_S:
                    fr = int(args[i + 1]) - 1
                    frb = True
                    i += 1
                elif args[i] == LINES_TO or args[i] == LINES_TO_S:
                    to = int(args[i + 1])
                    tob = True
                    i += 1
                else:
                    rnArgs += " " + args[i]
                i += 1

            if TEST:
                print "argstr: " + argstr
                i = 0
                for a in args:
                    print "bang " + str(i) + "- " + a
                    i += 1
                print "--------------"
    else:
        argsSearch = re.search("#!(.+)", data[0])
        if argsSearch:
            os.system(argsSearch.group(1) + " " + sourceFile)
            return
    
    index1 = sourceFile.rfind('/')
    index2 = sourceFile.rfind('.')

    arch = "64" if platform.architecture()[0] == "64bit" else "32"
    fileName = sourceFile[index1 + 1:]
    fileNameNoExt = sourceFile[index1 + 1:index2]
    filePath = sourceFile[:index1 + 1]
    fileExtension = sourceFile[index2:]
    outPath = BASE + filePath
    tempFile = outPath + "." + fileName + ".tmp"
    inputFiles = "\'" + sourceFile + "\'" + cmFiles.replace("$p", filePath)
    outFile = ""
    cm = ""
    rn = ""

    def formatItem(s):
        return s.format(
            arch=arch, fileName=fileName, fileNameNoExt=fileNameNoExt, filePath=filePath,
            fileExtension=fileExtension, outPath=outPath, tempFile=tempFile,
            inputFiles=inputFiles, outFile=outFile, sourceFile=sourceFile
        )
    lang = getLang(fileExtension)
    outFile = formatItem(lang["outFile"])
    cm = formatItem(lang["cm"])
    rn = formatItem(lang["rn"])

    cmArgs = cmArgs.replace("$p", filePath)
    rnArgs = rnArgs.replace("$p", filePath)

    try:
        cm_args = lang["cm_args"]
        for k in cm_args:
            for line in data:
                if re.search(k, line):
                    cmArgs += " " + cm_args[k]
                    break
    except Exception:
        pass

    if cm != "":
        cm += cmArgs
    rn += rnArgs

    if TEST:
        print(
            "fr = " + str(fr) + "\n"
            "to = " + str(to) + "\n"
            "sourceFile  = " + sourceFile + "\n"
            "fileName  = " + fileName + "\n"
            "filePath  = " + filePath + "\n"
            "fileExtension  = " + fileExtension + "\n"
            "outPath = " + outPath + "\n"
            "tempFile  = " + tempFile + "\n"
            "outFile  = " + outFile + "\n"
            "cm = " + cm + "\n"
            "rn = " + rn + "\n"
            "cmArgs = " + cmArgs + "\n"
            "rnArgs = " + rnArgs + "\n"
            "cmFiles = " + cmFiles + "\n"
            "--------------\n"
        )
        # quit()

    installIfNeeded(lang, DIST, fileExtension)

    def run():
        """
        Run the bin if it exists and its has a last modified date that is newer than the source
        """
        b2 = outFile[1:len(outFile) - 1]
        if os.path.exists(b2) and os.path.getmtime(b2) >= os.path.getmtime(sourceFile):
            if SHOW_COMMANDS:
                print("> " + rn)
            os.system("cd \'" + filePath + "\' && " + rn)
            if tmp:
                os.system("rm -f '" + sourceFile + "'")
            return True
        return False

    if frb or tob:
        os.system("rm -f " + outFile)

    if not run():
        """
        Compile the source. If it starts with '#!', remove it and generate a temp file
        """
        os.system("mkdir -p \'" + outPath + "\'")
        genTemp = sh or frb or tob
        if genTemp:
            shutil.move(sourceFile, tempFile)
            if not tob:
                to = len(data)
            with open(sourceFile, 'w') as fout:
                fout.writelines(data[fr:to])
        if SHOW_COMMANDS:
            print("> " + cm)
        os.system(cm)
        if genTemp:
            shutil.move(tempFile, sourceFile)
        run()

    if frb or tob:
        os.system("rm -f " + outFile)


if __name__ == "__main__":
    main()
